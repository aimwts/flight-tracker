import java.util.regex.Matcher

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'application'
idea.module.outputDir file("out/production/classes")

group = 'ai.swim'
description = 'Flight Info- Web Agents'
ext.moduleName = 'swim.simulator'
sourceCompatibility = 1.9
version = project.property('application.version')
mainClassName = 'swim.simulator.SimulatorPlane'

//def moduleName = 'swim.simulator'
def jvmVersion = System.getProperty('java.version').split('\\.')[0] as Integer
def useModules = jvmVersion >= 9 && !project.hasProperty('no-modules')

repositories {
  jcenter()
  maven {
    url "https://swimos.bintray.com/maven/"
  }

}

dependencies {
  api group: 'org.swimos', name: 'swim-server', version: version
  api group: 'org.swimos', name: 'swim-client', version: version
  implementation group: 'org.swimos', name: 'swim-xml', version: version
  compile group: 'com.microsoft.azure', name: 'azure-eventhubs', version: '2.3.0'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.8'
  compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.11'
  compile group: 'com.microsoft.azure.sdk.iot', name: 'iot-device-client', version: '1.17.1'
  compile group: 'com.github.jnr', name: 'jnr-unixsocket', version: '0.22'
  compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.4'
  compile group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.11'
  compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'  
}

// dependencies {
//   compile fileTree(dir: 'lib', include: '*.jar')
// }

afterEvaluate {
  compileJava {
    if (useModules) {
      doFirst {
        options.compilerArgs += [
          '--module-path', classpath.asPath,
        ]
        classpath = files()
      }
    }
    options.compilerArgs += ['-Xlint:-deprecation']
    options.encoding = 'UTF-8'
  }

  jar {
    inputs.property('moduleName', moduleName)
    manifest {
      attributes(
        'Implementation-Title': moduleName,
        'Implementation-Version': version,
        'Main-Class': mainClassName)
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    if (!useModules) {
      exclude '*module-info*'
    }
  }

  run {
    dependsOn jar
    doFirst {
      jvmArgs += [
        '--module-path', files(configurations.runtimeClasspath, jar.archiveFile).asPath,
        '--module', "${moduleName}/${mainClassName}"
      ]
      classpath = files()
    }
  }

  startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
      classpath = files()
      defaultJvmOpts = [
        '-Dswim.config=/server.recon',
        '-Xms4g',
        '-Xmx4g',
        '--module-path', 'APP_HOME_LIBS',
        '--module', "${moduleName}/${mainClassName}"
      ]
    }
    doLast {
      def bashFile = new File(outputDir, applicationName)
      String bashContent = bashFile.text
      bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

      def batFile = new File(outputDir, applicationName + ".bat")
      String batContent = batFile.text
      batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
  }

}
