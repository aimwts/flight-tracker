simulator: @fabric {
  @plane(class: "swim.simulator.SimulatorPlane")
  
  @node {
    pattern: "/simulator"
    @agent(class: "swim.simulator.agents.SimulatorAgent")
  }    

  @node {
    pattern: "/apiRequestAgent/:id"
    @agent(class: "swim.simulator.agents.ApiRequestAgent")
  }    

  @node {
    pattern: "/layoutManager"
    @agent(class: "swim.simulator.agents.ui.LayoutsManagerAgent")
  }    

  @node {
    pattern: "/layout/:id"
    @agent(class: "swim.simulator.agents.ui.LayoutAgent")
  }  

  @node {
    pattern: "/bridge/airports"
    @agent(class: "swim.simulator.agents.bridges.AirportsImportAgent") {
      config: {
        type: "airports",
        enabled: true,
        fileIn: "airports.csv",
        fileOut: "airports.csv",
        columns: "id,short_code,type,name,latitude,longitude,altitude,geo,country,region,city,scheduled_service,gps_code,iata_code,local_code,home_link,wiki_link",
        simInterval: 0,
        simType: "none",
        writeToCsv: false,
        laneUri: "/bridge/airports"
      }
    }
  }    

  @node {
    pattern: "/bridge/opensky"
    @agent(class: "swim.simulator.agents.bridges.OpenSkyAgent") {
      config: {
        type: "airplanes",
        enabled: true,
        fileIn: "stateVectorImport.csv",
        fileOut: "vehicle_history.csv",
        columns: "icao24,callsign,origin_country,time_position,last_contact,longitude,latitude,baro_altitude,on_ground,velocity,heading,vertical_rate,geo_altitude,squawk,spi",
        simInterval: 55000,
        simType: "linear",
        writeToCsv: false,
        preloadFromCsv: false,
        queryBounds: 1.0,
        apiQueryAutoStart: true,
        apiQueryInterval: 5500,
        queryWorld: true,
        apiUrl: "https://<api_username>:<api_password>@opensky-network.org/api",
        apiQueryParams: "/states/all?lamin=%1$s&lomin=%2$s&lamax=%3$s&lomax=%4$s",
        worldQueryParam: "/states/all",
        laneUri: "/bridge/opensky",
        serverUrl: "ws://127.0.0.1:9001"     
      }
    }
  }    

  @node {
    pattern: "/bridge/countries"
    @agent(class: "swim.simulator.agents.bridges.CountriesImportAgent") {
      config: {
        type: "countries"
        enabled: true,
        fileIn: "country_centroids_az8.csv",
        fileOut: "countries.csv",
        columns: "FID,the_geom,FID_,scalerank,featurecla,labelrank,sovereignt,sov_a3,adm0_dif,level,type,admin,adm0_a3,geou_dif,name,gu_a3,su_dif,subunit,su_a3,brk_diff,name,name_long,brk_a3,brk_name,brk_group,abbrev,postal,formal_en,formal_fr,note_adm0,note_brk,name_sort,name_alt,mapcolor7,mapcolor8,mapcolor9,mapcolor13,pop_est,gdp_md_est,pop_year,lastcensus,gdp_year,economy,income_grp,wikipedia,fips_10,iso_a2,iso_a3,iso_n3,un_a3,wb_a2,wb_a3,woe_id,adm0_a3_is,adm0_a3_us,adm0_a3_un,adm0_a3_wb,continent,region_un,subregion,region_wb,name_len,long_len,abbrev_len,tiny,homepart,longitude,latitude",
        simInterval: 0,
        simType: "none",
        writeToCsv: false,
        laneUri: "/bridge/countries"        
      }
    }
  }    

  @node {
    pattern: "/bridge/weather"
    @agent(class: "swim.simulator.agents.bridges.WeatherDataAgent") {
      config: {
        type: "weather",
        enabled: true,
        fileIn: "gairmets.xml",
        fileOut: "weather.csv",
        columns: "product,tag,hazardType,hazardSeverity,wxDetails,receiptTime,issueTime,expireTime,validTime,altitudeMin,altitudeMax,geometry_type",
        simInterval: 0,
        simType: "none",
        writeToCsv: false,
        apiQueryAutoStart: false,
        laneUri: "/bridge/weather",
        apiUrl: "https://www.aviationweather.gov/adds/dataserver_current/httpparam",
        apiQueryParams: "?dataSource=gairmets&requestType=retrieve&format=xml&hoursBeforeNow=4",
        apiQueryInterval: 360000        
      }
    }
  }  

}

@web(port: 9002) {
  space: "simulator"
  @websocket {
    serverCompressionLevel: 0# -1 = default; 0 = off; 1-9 = deflate level
    clientCompressionLevel: 0# -1 = default; 0 = off; 1-9 = deflate level
  }
}